

const byte camPort  =  IN_1;

#define CAMADDR     0x02
#define K_VALUE 30
#include "nxtcamlib-default.nxc"
#define NEAR 30
#define VELOCITY 50
#define P_VALUE 0.01

// Global variables.
int nblobs;  // number of blobs that are in view of NXTCam (value between 0 and 8)

//Print sensor information from its register
void ShowSensorInfo(byte prt, byte Addres )
{
   if( i2cread(prt,Addres,0x00,1)>1)
   {
     // sensor name
     TextOut(0, LCD_LINE8, i2cReadString(prt, Addres, 0x10, 8), false);
     // sensor firmware version.
     TextOut(50, LCD_LINE8, i2cReadString(prt, Addres, 0x00, 8), false);
   }
}


task main ()
{
  SetSensor(IN_2, SENSOR_LOWSPEED);
  Wait(800);
  OnFwd(OUT_B,100);
  int bc[10];
  int bl[10];
  int bt[10];
  int br[10];
  int bb[10];
  int i;
  int init;
  int k = 0;
  ShowSensorInfo(camPort, CAMADDR);
  Wait(130);
  // Initialise the camera
  init = NXTCam_Init(camPort, CAMADDR);
  NXTCam_SendCommand(camPort, CAMADDR, 'E'); // enable tracking
  Wait(300);
  NXTCam_SendCommand(camPort, CAMADDR, 'D'); // disable tracking (SE PRUEBA O SE QUITA)
  Wait(300);
  NXTCam_SendCommand(camPort, CAMADDR, 'L'); // line tracking
  Wait(300);
  NXTCam_SendCommand(camPort, CAMADDR, 'E'); // enable tracking
  Wait(300);
  while (true)
  {
    if(SensorUS(IN_2)<NEAR)
    {
        Off(OUT_AC);
    }
    else
    {
      ShowSensorInfo(camPort, CAMADDR);
      Wait(100);
      NXTCam_GetBlobs(camPort, CAMADDR, nblobs, bc, bl, bt, br, bb);
      k = 0;
      if(nblobs > 0)
      {
          k = bt[nblobs-1] + bl[nblobs-1] - 176;
        if(k > K_VALUE)
        {
            Off(OUT_C);
            OnFwd (OUT_A, VELOCITY*(k*P_VALUE));
        }
        else if(k < -K_VALUE)
        {
            Off(OUT_A);
            OnFwd (OUT_C, VELOCITY*(k*P_VALUE));
        }
        else
        {
              OnFwd (OUT_AC, VELOCITY);
        }
        Wait(200);

      }
    }
  }
  PlayTone(440, 30);
  NXTCam_SendCommand(camPort, CAMADDR, 'D'); // disable tracking
  Wait(500);
  StopAllTasks();
}
