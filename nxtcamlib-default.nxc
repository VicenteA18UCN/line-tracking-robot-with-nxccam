/************************************************************************/
/*                                                                      */
/* Program Name: nxtcamlib-default.nxc                                  */
/* ===========================                                          */
/*                                                                      */
/* Copyright (c) 2008 by mindsensors.com                                */
/* Email: info (<at>) mindsensors (<dot>) com                           */
/*                                                                      */
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; version 3 of the License.              */
/* Read the license at: http://www.gnu.org/licenses/gpl.txt             */
/*                                                                      */
/************************************************************************/

/*
  nxtcamlib-default.nxc
  NXC Library routines to simplify use of NXTcam.
	This file contains all the functions used for
	communication with NXTCam default firmware.

  Written by Deepak Patil Jan 2010
  */
#include "nxtcamlib-common.nxc"

// void NXTCam_Init() - Initialises camera ready to find blobs.
int NXTCam_Init(byte camPort, byte camAddr)
{
	string s, msg;
	int i, n;
  byte outbuf[];
  byte cmdbuf[];
  byte nByteReady = 0;
	byte cnt;

  SetSensorLowspeed(camPort);
  NXTCam_SendCommand(camPort, camAddr, 'D'); // disable tracking

  s = "";
	i = 0;
	Wait(100);
	// wait until you can read the vendor name mndsnsrs
	// compare only first letter.
	// try a few times
  while (s[0] != 'm' && i < 200 ) {
  	s = i2cReadString(camPort, camAddr, 0x08, 8);
    Wait(40);
		i++;
  }
	//s = i2cReadString(prt, Addres, 0x00, 8);
  ArrayBuild(cmdbuf, camAddr, 0x00);

  n = STAT_COMM_PENDING;
  while ( n == STAT_COMM_PENDING ) {
    n = I2CStatus(camPort, nByteReady);
  }

	// ensure that NXTCam firmware is compatible with this library.
	cnt = 8;
  if(I2CBytes(camPort, cmdbuf, cnt, outbuf)) {
	  if ( outbuf[4] == 'G' ) {
		  // looks like generic firmware, 
			// this library file is incompatible with it.
			TextOut(0, LCD_LINE4, "** ERROR **    ", false);
			TextOut(0, LCD_LINE5, "Incompatible   ", false);
			TextOut(0, LCD_LINE6, "Firmware       ", false);
			TextOut(0, LCD_LINE7, "               ", false);
			TextOut(0, LCD_LINE8, "Press ORNG Btn ", false);
			PlayTone (440,200);
			Wait (500);
			PlayTone (440,200);
			until(ButtonPressed(BTNCENTER, true));
			StopAllTasks();
			return 0;
		}
	}
	return i;
}

/*
void NXTCam_GetBlobs() - loads the current blobs into the global data structure over I2C
Get the blob information of all the blobs that NXTCam is tracking.
There could be upto 8 blobs being tracked by NXTCam. 
This function will return color and coordinate information for all the blobs.
If the NXTCam has found 3 blobs, the information for 4th, 5th, 6th and 7th blob is not valid.
Port: the NXT port to which the device is connected.
nblobs: nblobs returns number of blobs NXTCam sees.
The blobs NXTCam sees could be of different color or same color.
For e.g. if you have 3 colors defined, say red (color 1),
blue (color 2) and green (color3), and you have 3 red objects
and 2 blue objects and 1 green object in front of NXTCam,
nblobs will be 6.
color[]: a array of colors for the blobs 
in above example, Color array will have 6 valid elements -
three bytes will say 1 (for color1), and 2 bytes will say color 2,
and 1 byte will say 3 (for color 3).
Based on sorting chosen, they will be sorted by size or color
(if the sorting was color, first 3 bytes will be 1, next two will
be 2 and next one will be 3).

Left[], top[], right[] bottom[]: the coordinate values of the blobs.
*/
void NXTCam_GetBlobs(byte port, byte camAddr, int &nblobs,
                     int &color[], int &left[],
                     int &top[], int &right[], int &bottom[])
{
  byte nByteReady = 0;
  byte msg[3];
  byte reply[5];
  int i;
  int n;
  int x;
  byte buf[10];
  string str;

  // Initialize the returning arrays with zeros.
  for (i = 0; i < 10; i++) {
    color[i]   = 0;
    left[i]   = -1;
    top[i]     = -1;
    right[i]   = -1;
    bottom[i] = -1;
  }

  NXTCam_Flush(port);

  // Request number of blobs from the count register
  // NXTCAM_REG_COUNT is where number of detected objects are stored.
  ArrayBuild(msg, camAddr, NXTCAM_REG_COUNT);

	while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);

  n = I2CWrite(port, 1, msg);

  if ( n != NO_ERR ) {
#ifdef MS_DEBUG
    string msg2;
    msg2 = "WriteError1:";
    msg2 += NumToStr(n);
    msg2 += "  ";
    TextOut(0, LCD_LINE8, msg2, false);
#endif
    return;
  }

	while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);

  // Get the reply and put into nblobs global
  n = I2CRead(port, 1, buf);
  if ( n != NO_ERR ) {
#ifdef MS_DEBUG
    string msg2;
    msg2 = "ReadError1:";
    msg2 += NumToStr(n);
    msg2 += "  ";
    TextOut(0, LCD_LINE8, msg2, false);
#endif
    return;
  }
	while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);

  nblobs = buf[0]& 0x00FF;

  // work around for out of bounds nblobs value.
  if ( nblobs < 0 || nblobs > 8 ) {  
    nblobs = 0;
  }

  // Get nblobs of blob data from the camera
  for (i = 0; i < nblobs; i++) {

    // Request blob data
    x = NXTCAM_REG_DATA+(i*5);
    ArrayBuild(msg, camAddr, x);
		while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);
    n = I2CWrite(port, 5, msg);
    if ( n != NO_ERR ) {
#ifdef MS_DEBUG
      string msg2;
      msg2 = "WriteError2:";
      msg2 += NumToStr(n);
      msg2 += "  ";
      TextOut(0, LCD_LINE8, msg2, false);
#endif
      return;
    }

    // Get blob data reply
		while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);

    n = I2CRead(port, 5, buf);
    if ( n != NO_ERR ) {
#ifdef MS_DEBUG
      string msg2;
      msg2 = "ReadError2:";
      msg2 += NumToStr(n);
      msg2 += "  ";
      TextOut(0, LCD_LINE8, msg2, false);
#endif
      return;
    }

		while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);

    // Put data into global variables.
    color[i]   = buf[0] & 0x00FF;
    left[i]   = buf[1] & 0x00FF;
    top[i]     = buf[2] & 0x00FF;
    right[i]   = buf[3] & 0x00FF;
    bottom[i] = buf[4] & 0x00FF;

    // NXTCam_Flush(port);
  }

}

void NXTCam_WriteColormap (byte colormap[], byte addr, byte port)
{
	string msg, x0,x1,x2,x3,x4,x5,x6,x7, i0, loc;
	byte location, val0, val1, val2, val3, val4, val5, val6, val7;
	int i;
  byte nByteReady = 0;
  byte message[20];

	for (i=0; i< 6; i++) {
	  location = 0x80 + (i*8);
		val0 = colormap[(i*8)+0];
		val1 = colormap[(i*8)+1];
		val2 = colormap[(i*8)+2];
		val3 = colormap[(i*8)+3];
		val4 = colormap[(i*8)+4];
		val5 = colormap[(i*8)+5];
		val6 = colormap[(i*8)+6];
		val7 = colormap[(i*8)+7];

		ArrayBuild(message, addr, location, val0, val1, val2, val3, val4, val5, val6, val7);

		while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);
		I2CWrite(port, 0, message);

		while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);

		x0 = NumToStr(val0);
		x1 = NumToStr(val1);
		x2 = NumToStr(val2);
		x3 = NumToStr(val3);
		x4 = NumToStr(val4);
		x5 = NumToStr(val5);
		x6 = NumToStr(val6);
		x7 = NumToStr(val7);

		i0 = NumToStr(i);
		loc = NumToStr(location);
		msg = "loc " + loc + ":   ";
		TextOut(0, LCD_LINE2, msg, false);
		msg = " " + x0 + " " + x1 + " " + x2 + " " + x3 + "   ";
		TextOut(0, LCD_LINE3, msg, false);
		msg = " " + x4 + " " + x5 + " " + x6 + " " + x7 + "   ";
		TextOut(0, LCD_LINE4, msg, false);

		Wait(2000);
	}
	Wait(2000);
	while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);
	NXTCam_SendCommand(port, addr, 'S'); // Save the colormap
	Wait(2000);
	while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);

}

byte NXTCam_Read_CCD_Register(byte port, byte addr, byte regToRead)
{
	byte result;

	NXTCam_i2cwrite(port, addr, 0x6B, 0x01);  // how many bytes to read
	Wait(50);
	NXTCam_i2cwrite(port, addr, 0x6C, regToRead);  // which register to read
	Wait(50);
	NXTCam_i2cwrite(port, addr, 0x41, 'H');  // H-command to get cam registers.
	Wait(800);

	// needs to be done again.
	NXTCam_i2cwrite(port, addr, 0x6B, 0x01);  // how many bytes to read
	Wait(50);
	NXTCam_i2cwrite(port, addr, 0x6C, regToRead);  // which register to read
	Wait(50);
	NXTCam_i2cwrite(port, addr, 0x41, 'H');  // H-command to get cam registers.
	Wait(800);

	result = i2cread(port, addr, 0x6D, 1);

	return result;
}

byte NXTCam_Write_CCD_Register(byte port, byte addr, byte regToWrite, byte value)
{
	byte result;

	NXTCam_i2cwrite(port, addr, 0x6B, 0x01);
	Wait(50);
	NXTCam_i2cwrite(port, addr, 0x6C, regToWrite);
	Wait(50);
	NXTCam_i2cwrite(port, addr, 0x6D, value);
	Wait(50);
	NXTCam_i2cwrite(port, addr, 0x41, 'C');  // C-command to set cam registers.
	Wait(500);

	return result;
}
